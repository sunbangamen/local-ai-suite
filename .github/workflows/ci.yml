  name: CI Pipeline

  on:
    push:
      branches: [ main, develop, issue-* ]
    pull_request:
      branches: [ main, develop ]

  jobs:
    lint:
      name: Lint & Format Check
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4

        - uses: actions/setup-python@v5
          with:
            python-version: '3.11'
            cache: 'pip'

        - name: Install linting tools
          run: |
            pip install black ruff

        - name: Black format check
          run: |
            black --check services/ scripts/ || {
              echo "::error::Code formatting issues found. Run 'black services/ scripts/' to fix."
              exit 1
            }

        - name: Ruff lint
          run: |
            ruff check services/ scripts/ || {
              echo "::error::Linting issues found. Run 'ruff check --fix services/ scripts/' to fix."
              exit 1
            }

    security-scan:
      name: Security Scan
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4

        - uses: actions/setup-python@v5
          with:
            python-version: '3.11'

        - name: Install security scan tools
          run: |
            pip install bandit safety

        - name: Bandit security scan
          run: |
            bandit -r services/ -f json -o bandit-report.json || true
            bandit -r services/ -ll || echo "::warning::Bandit found potential security issues"

        - name: Safety dependency check
          run: |
            # Collect all requirements files
            find services -name "requirements.txt" -exec cat {} \; > all-requirements.txt
            safety check --file all-requirements.txt --json || echo "::warning::Safety found vulnerable dependencies"

        - name: Upload security reports
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: security-reports
            path: |
              bandit-report.json
              all-requirements.txt
            retention-days: 30

    unit-tests:
      name: Unit Tests (${{ matrix.service }})
      runs-on: ubuntu-latest
      strategy:
        fail-fast: false
        matrix:
          service: [mcp-server, rag, embedding]

      steps:
        - uses: actions/checkout@v4

        - uses: actions/setup-python@v5
          with:
            python-version: '3.11'
            cache: 'pip'

        - name: Install test dependencies
          run: |
            pip install pytest pytest-cov pytest-asyncio httpx

            # Install service-specific dependencies
            if [ -f services/${{ matrix.service }}/requirements.txt ]; then
              pip install -r services/${{ matrix.service }}/requirements.txt
            fi

        - name: Run tests with coverage
          working-directory: services/${{ matrix.service }}
          run: |
            # Skip tests if no test directory exists
            if [ ! -d "tests" ]; then
              echo "::warning::No tests directory found for ${{ matrix.service }}"
              exit 0
            fi

            pytest tests/ \
              --cov=. \
              --cov-report=xml \
              --cov-report=term-missing \
              --cov-report=html \
              -v || exit 1

        - name: Upload coverage to Codecov
          if: always()
          uses: codecov/codecov-action@v4
          with:
            files: ./services/${{ matrix.service }}/coverage.xml
            flags: ${{ matrix.service }}
            name: ${{ matrix.service }}-coverage
            fail_ci_if_error: false

        - name: Upload coverage HTML report
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: coverage-${{ matrix.service }}
            path: services/${{ matrix.service }}/htmlcov/
            retention-days: 30

    # Integration tests with CPU profile (Mock LLM servers)
    integration-tests:
      name: Integration Tests (CPU Profile)
      runs-on: ubuntu-latest
      needs: [unit-tests]

      steps:
        - uses: actions/checkout@v4

        - uses: actions/setup-python@v5
          with:
            python-version: '3.11'

        - name: Install test dependencies
          run: |
            pip install pytest pytest-asyncio httpx

        - name: Start services with CPU profile
          run: |
            docker compose -f docker/compose.p2.cpu.yml up -d
            echo "::notice::Services starting with Mock LLM servers (CPU-only)"

        - name: Wait for services
          run: |
            echo "Waiting 60 seconds for all services to be ready..."
            sleep 60

        - name: Health checks
          run: |
            echo "::group::Service Health Checks"

            # Check inference servers (mock)
            curl -f http://localhost:8001/health || echo "::warning::Inference Chat health check failed"
            curl -f http://localhost:8004/health || echo "::warning::Inference Code health check failed"

            # Check API Gateway
            curl -f http://localhost:8000/health || curl -f http://localhost:8000/v1/models || echo "::warning::API Gateway health check failed"

            # Check RAG
            curl -f http://localhost:8002/health || echo "::warning::RAG health check failed"

            # Check Embedding
            curl -f http://localhost:8003/health || echo "::warning::Embedding health check failed"

            echo "::endgroup::"

        - name: Run basic integration tests
          run: |
            echo "::group::Integration Tests"
            # These tests verify service connectivity, not actual inference
            pytest tests/integration/test_api_gateway.py::test_api_gateway_health -v || echo "::warning::Health test failed"
            echo "::endgroup::"

        - name: Run RAG integration tests
          run: |
            echo "::group::RAG Integration Tests"
            # Run RAG service end-to-end tests (requires Phase 2 stack)
            make test-rag-integration-coverage || echo "::warning::RAG integration tests failed"
            echo "::endgroup::"
  
        - name: Upload RAG integration coverage
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: rag-integration-coverage
            path: docs/rag_integration_coverage.json
            retention-days: 30

        - name: Show service logs on failure
          if: failure()
          run: |
            echo "::group::Service Logs"
            docker compose -f docker/compose.p2.cpu.yml logs
            echo "::endgroup::"

        - name: Teardown
          if: always()
          run: |
            docker compose -f docker/compose.p2.cpu.yml down -v

    build-check:
      name: Docker Build Check
      runs-on: ubuntu-latest
      needs: [lint, unit-tests]
      strategy:
        fail-fast: false
        matrix:
          service: [embedding, rag, mcp-server]

      steps:
        - uses: actions/checkout@v4

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Build Docker image (dry-run)
          working-directory: services/${{ matrix.service }}
          run: |
            if [ -f Dockerfile ]; then
              docker build --no-cache -t ${{ matrix.service }}:ci-test .
              echo "::notice::âœ… Docker build successful for ${{ matrix.service }}"
            else
              echo "::warning::No Dockerfile found for ${{ matrix.service }}"
            fi

    summary:
      name: CI Summary
      runs-on: ubuntu-latest
      needs: [lint, security-scan, unit-tests, integration-tests, build-check]
      if: always()
      steps:
        - name: Check CI status
          run: |
            echo "::notice::CI Pipeline completed"
            echo "::notice::Lint: ${{ needs.lint.result }}"
            echo "::notice::Security: ${{ needs.security-scan.result }}"
            echo "::notice::Unit Tests: ${{ needs.unit-tests.result }}"
            echo "::notice::Integration Tests: ${{ needs.integration-tests.result }}"
            echo "::notice::Build: ${{ needs.build-check.result }}"

            if [[ "${{ needs.lint.result }}" == "failure" ]] || \
               [[ "${{ needs.unit-tests.result }}" == "failure" ]] || \
               [[ "${{ needs.integration-tests.result }}" == "failure" ]]; then
              echo "::error::CI failed - check logs above"
              exit 1
            fi
