openapi: 3.0.0
info:
  title: Local AI Suite - Approval Workflow API
  description: |
    RESTful API for managing approval requests in the Local AI Suite RBAC system.

    Used for programmatic access to approval workflow operations, complementing
    the CLI-based interface for administrative tasks.
  version: 1.0.0
  contact:
    name: AI Suite Team
  license:
    name: MIT

servers:
  - url: http://localhost:8020/api/v1
    description: Development server (local)
  - url: /api/v1
    description: Relative path (production)

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: |
        API Key for authentication.

        Usage: Add header `X-API-Key: <your-api-key>` to all requests.

        Keys are managed by administrators and stored securely in the system.
        Contact your administrator to request an API key.

  schemas:
    ApprovalRequest:
      type: object
      required:
        - request_id
        - user_id
        - tool_name
        - status
        - requested_at
        - expires_at
      properties:
        request_id:
          type: string
          format: uuid
          description: Unique identifier for the approval request
          example: "550e8400-e29b-41d4-a716-446655440000"
        user_id:
          type: string
          description: ID of the user requesting approval
          example: "user_123"
        tool_name:
          type: string
          description: Name of the MCP tool requiring approval
          example: "git_commit"
        status:
          type: string
          enum: [pending, approved, rejected, expired]
          description: Current status of the approval request
          example: "pending"
        requested_at:
          type: string
          format: date-time
          description: ISO 8601 timestamp of request creation
          example: "2025-10-25T10:30:00Z"
        expires_at:
          type: string
          format: date-time
          description: ISO 8601 timestamp of request expiration
          example: "2025-10-25T10:35:00Z"
        responded_at:
          type: string
          format: date-time
          description: ISO 8601 timestamp of response (only for approved/rejected)
          example: "2025-10-25T10:32:15Z"
        responder_id:
          type: string
          description: ID of the admin who approved/rejected (only for approved/rejected)
          example: "admin_001"
        response_reason:
          type: string
          description: Reason for approval or rejection
          example: "Approved as part of routine git operations"
        request_context:
          type: object
          description: Additional context data from the request
          example: {}

    ApprovalStats:
      type: object
      properties:
        total_requests:
          type: integer
          description: Total approval requests in system
          example: 157
        pending_count:
          type: integer
          description: Number of pending requests
          example: 5
        approved_count:
          type: integer
          description: Number of approved requests
          example: 135
        rejected_count:
          type: integer
          description: Number of rejected requests
          example: 12
        expired_count:
          type: integer
          description: Number of expired requests
          example: 5
        approval_rate:
          type: number
          format: double
          description: Approval rate as percentage (0-1)
          example: 0.9180
        avg_response_time_seconds:
          type: number
          format: double
          description: Average response time in seconds
          example: 120.45

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Approval request not found"
        code:
          type: string
          description: Error code for programmatic handling
          example: "NOT_FOUND"
        details:
          type: object
          description: Additional error details
          example: {}

security:
  - ApiKeyAuth: []

paths:
  /approvals:
    get:
      summary: List approval requests
      description: |
        Retrieve a list of approval requests with optional filtering.

        **Permissions**: Requires `approval:view` permission (admin/operator)
      operationId: listApprovals
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, approved, rejected, expired]
          description: Filter by approval request status
          example: pending
        - name: user_id
          in: query
          schema:
            type: string
          description: Filter by requesting user ID
          example: user_123
        - name: tool_name
          in: query
          schema:
            type: string
          description: Filter by MCP tool name
          example: git_commit
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 1000
          description: Maximum number of results to return
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
          description: Number of results to skip (pagination)
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  approvals:
                    type: array
                    items:
                      $ref: "#/components/schemas/ApprovalRequest"
                  total:
                    type: integer
                    description: Total count (ignoring limit/offset)
                  limit:
                    type: integer
                  offset:
                    type: integer
        "400":
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (invalid or missing API key)
        "403":
          description: Forbidden (insufficient permissions)

    post:
      summary: Create approval request
      description: |
        Manually create an approval request (typically for testing/debugging).

        **Permissions**: Requires `approval:create` permission (admin only)
      operationId: createApproval
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tool_name
              properties:
                tool_name:
                  type: string
                  description: Name of the MCP tool requiring approval
                  example: "git_commit"
                user_id:
                  type: string
                  description: User requesting approval (defaults to current user)
                  example: "user_123"
                request_context:
                  type: object
                  description: Additional context data
                  example: {}
      responses:
        "201":
          description: Approval request created
          content:
            application/json:
              schema:
                type: object
                properties:
                  request_id:
                    type: string
                    format: uuid
                  status:
                    type: string
                  expires_in_seconds:
                    type: integer
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden

  /approvals/{request_id}:
    get:
      summary: Get approval request details
      description: |
        Retrieve detailed information about a specific approval request.

        Supports both full UUID and short ID (first 8 characters).
      operationId: getApproval
      parameters:
        - name: request_id
          in: path
          required: true
          schema:
            type: string
          description: Approval request ID (UUID or short ID)
          example: "550e8400"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApprovalRequest"
        "404":
          description: Approval request not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      summary: Approve or reject request
      description: |
        Process an approval request by approving or rejecting it.

        **Permissions**: Requires `approval:approve` permission (admin only)
      operationId: respondApproval
      parameters:
        - name: request_id
          in: path
          required: true
          schema:
            type: string
          description: Approval request ID (UUID or short ID)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - reason
              properties:
                action:
                  type: string
                  enum: [approve, reject]
                  description: Approval decision
                  example: "approve"
                reason:
                  type: string
                  description: Reason for the decision
                  example: "Approved as part of scheduled maintenance"
      responses:
        "200":
          description: Request processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  request_id:
                    type: string
                  responder:
                    type: string
        "400":
          description: Invalid action or missing fields
        "404":
          description: Approval request not found
        "409":
          description: Request already processed or expired

    delete:
      summary: Cancel approval request
      description: |
        Cancel a pending approval request.

        Can only be used on requests with status=pending.

        **Permissions**: Requires `approval:cancel` permission (admin/request owner)
      operationId: cancelApproval
      parameters:
        - name: request_id
          in: path
          required: true
          schema:
            type: string
          description: Approval request ID (UUID or short ID)
      responses:
        "204":
          description: Request cancelled successfully
        "404":
          description: Approval request not found
        "409":
          description: Request cannot be cancelled (already processed)

  /approvals/stats:
    get:
      summary: Get approval statistics
      description: |
        Retrieve aggregate statistics about approval requests.

        **Permissions**: Requires `approval:view` permission (admin/operator)
      operationId: getApprovalStats
      parameters:
        - name: time_range
          in: query
          schema:
            type: string
            enum: [1h, 24h, 7d, 30d, all]
            default: 24h
          description: Time range for statistics
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApprovalStats"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
